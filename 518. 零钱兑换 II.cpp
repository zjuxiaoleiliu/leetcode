给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。
假设每一种面额的硬币有无限个。 

 

示例 1:

输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
示例 2:

输入: amount = 3, coins = [2]
输出: 0
解释: 只用面额2的硬币不能凑成总金额3。
示例 3:

输入: amount = 10, coins = [10] 
输出: 1
 

注意:

你可以假设：

0 <= amount (总金额) <= 5000
1 <= coin (硬币面额) <= 5000
硬币种类不超过 500 种
结果符合 32 位符号整数


//动态规划，分解要做到不重不漏

/*
对于剩下的任意dp[i][j]，我们依次从左到右，从上到下计算，dp[i][j]的值下面的方法数的和：

完全不用arr[i]的货币，只使用arr[0..i-1]货币时，方法数为dp[i-1][j]
用1张arr[i]货币，剩下的钱用arr[0..i-1]货币组成时，方法数为dp[i-1][j-arr[i]]
用2张arr[i]货币，剩下的钱用arr[0..i-1]货币组成时，方法数为dp[i-1][j-2*arr[i]]
…
用k张arr[i]货币，剩下的钱用arr[0..i-1]货币组成时，方法数为dp[i-1][j-k*arr[i]]

其实从第二种情况到第k种情况方法的累加值其实就是dp[i][j-arr[i]]的值
（解释一下：比如我们有两个硬币[1,2]，钱数为5，那么钱数的5的组成方法是可以看作两部分组成，
一种是由硬币1单独组成，那么仅有一种情况(1+1+1+1+1)；另一种是由1和2共同组成，
说明我们的组成方法中至少需要由一个2，所以此时我们先取出一个硬币2，
那么我们只要拼出钱数为3即可，这个3还是可以用硬币1和2来拼，
所以就相当于求由硬币[1,2]组成的钱数为3的总方法。），
所以dp[i][j] = dp[i-1][j] + dp[i][j-arr[i]]

*/
class Solution {
public:
    int change(int amount, vector<int>& coins) {

		if(amount == 0)
			return 1;
		int n = coins.size();
		if(n == 0)
			return 0;
    	vector<vector<int>> dp(n,vector<int>(amount+1,0));
        for(int i=0;i<=amount;i++)
        {
            if(i%coins[0] == 0)
            	dp[0][i]=1;
        }        
        for(int i = 1; i < n; i++)
        {
            dp[i][0] = 1;
            for(int j = 1; j <= amount; j++)
            {
            	dp[i][j]= dp[i-1][j];
            	//为了做到不重不漏，枚举划分方案中第i种硬币可以出现的次数
                // for(int cnt = 1;cnt*coins[i] <= j;cnt++)
                //     dp[i][j] += dp[i-1][j-cnt*coins[i]];
                if(j-coins[i]>=0)
                    dp[i][j] += dp[i][j-coins[i]];                                       
            }
        }
        return dp[n-1][amount];        
    }
};

//根据上面的二维动态规划的递推公式，我们可以可以只用一维数组保存中间的信息